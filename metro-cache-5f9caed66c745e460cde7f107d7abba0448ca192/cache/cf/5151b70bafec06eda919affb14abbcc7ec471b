__d(function (global, require, module, exports, _dependencyMap) {
	;

	(function (isNode) {
		var Public = function Public(clone) {
			return merge(clone === true, false, arguments);
		},
		    publicName = 'merge';

		Public.recursive = function (clone) {
			return merge(clone === true, true, arguments);
		};

		Public.clone = function (input) {
			var output = input,
			    type = typeOf(input),
			    index,
			    size;

			if (type === 'array') {
				output = [];
				size = input.length;

				for (index = 0; index < size; ++index) {
					output[index] = Public.clone(input[index]);
				}
			} else if (type === 'object') {
				output = {};

				for (index in input) {
					output[index] = Public.clone(input[index]);
				}
			}

			return output;
		};

		function merge_recursive(base, extend) {
			if (typeOf(base) !== 'object') return extend;

			for (var key in extend) {
				if (typeOf(base[key]) === 'object' && typeOf(extend[key]) === 'object') {
					base[key] = merge_recursive(base[key], extend[key]);
				} else {
					base[key] = extend[key];
				}
			}

			return base;
		}

		function merge(clone, recursive, argv) {
			var result = argv[0],
			    size = argv.length;
			if (clone || typeOf(result) !== 'object') result = {};

			for (var index = 0; index < size; ++index) {
				var item = argv[index],
				    type = typeOf(item);
				if (type !== 'object') continue;

				for (var key in item) {
					var sitem = clone ? Public.clone(item[key]) : item[key];

					if (recursive) {
						result[key] = merge_recursive(result[key], sitem);
					} else {
						result[key] = sitem;
					}
				}
			}

			return result;
		}

		function typeOf(input) {
			return {}.toString.call(input).slice(8, -1).toLowerCase();
		}

		if (isNode) {
			module.exports = Public;
		} else {
			window[publicName] = Public;
		}
	})(typeof module === 'object' && module && typeof module.exports === 'object' && module.exports);
});